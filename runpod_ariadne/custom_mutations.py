# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import ContainerRegistryAuthFields, PodFields
from .custom_typing_fields import GraphQLField
from .input_types import (
    PodBidResumeInput,
    PodEditJobInput,
    PodFindAndDeployOnDemandInput,
    PodRentInterruptableInput,
    PodResumeInput,
    PodStopInput,
    PodTerminateInput,
    SaveRegistryAuthInput,
)


class Mutation:
    @classmethod
    def pod_bid_resume(cls, input: PodBidResumeInput) -> PodFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PodBidResumeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PodFields(field_name="podBidResume", arguments=cleared_arguments)

    @classmethod
    def pod_edit_job(cls, input: PodEditJobInput) -> PodFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PodEditJobInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PodFields(field_name="podEditJob", arguments=cleared_arguments)

    @classmethod
    def pod_find_and_deploy_on_demand(
        cls, *, input: Optional[PodFindAndDeployOnDemandInput] = None
    ) -> PodFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PodFindAndDeployOnDemandInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PodFields(
            field_name="podFindAndDeployOnDemand", arguments=cleared_arguments
        )

    @classmethod
    def pod_rent_interruptable(cls, input: PodRentInterruptableInput) -> PodFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PodRentInterruptableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PodFields(field_name="podRentInterruptable", arguments=cleared_arguments)

    @classmethod
    def pod_resume(cls, input: PodResumeInput) -> PodFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PodResumeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PodFields(field_name="podResume", arguments=cleared_arguments)

    @classmethod
    def pod_stop(cls, input: PodStopInput) -> PodFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PodStopInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PodFields(field_name="podStop", arguments=cleared_arguments)

    @classmethod
    def pod_terminate(cls, input: PodTerminateInput) -> GraphQLField:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PodTerminateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GraphQLField(field_name="podTerminate", arguments=cleared_arguments)

    @classmethod
    def save_registry_auth(
        cls, *, input: Optional[SaveRegistryAuthInput] = None
    ) -> ContainerRegistryAuthFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SaveRegistryAuthInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ContainerRegistryAuthFields(
            field_name="saveRegistryAuth", arguments=cleared_arguments
        )
