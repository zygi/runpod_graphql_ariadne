# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from .base_operation import GraphQLField
from .custom_typing_fields import (
    ApiKeyGraphQLField,
    AuditLogConnectionGraphQLField,
    AuditLogGraphQLField,
    BenchmarkPodGraphQLField,
    ClientCreditChargeGraphQLField,
    ContainerRegistryAuthGraphQLField,
    CpuFlavorGraphQLField,
    CpuTypeGraphQLField,
    CreditCodeGraphQLField,
    DataCenterGraphQLField,
    DataCenterStorageGraphQLField,
    DataCenterStorageListGraphQLField,
    DiscountGraphQLField,
    EndpointGraphQLField,
    EnvironmentVariableGraphQLField,
    GpuAvailabilityGraphQLField,
    GpuGraphQLField,
    GpuTelemetryGraphQLField,
    GpuTypeGraphQLField,
    ImpersonationGraphQLField,
    LowestPriceGraphQLField,
    MachineBalanceGraphQLField,
    MachineBenchmarkGraphQLField,
    MachineEarningGraphQLField,
    MachineGraphQLField,
    MachineMaintenanceGraphQLField,
    MachineSummaryGraphQLField,
    MachineSystemGraphQLField,
    MachineTelemetryGraphQLField,
    MachineUptimeGraphQLField,
    NetworkStorageEarningGraphQLField,
    NetworkVolumeGraphQLField,
    PageInfoGraphQLField,
    PodGraphQLField,
    PodMachineInfoGraphQLField,
    PodRegistryGraphQLField,
    PodRuntimeContainerGraphQLField,
    PodRuntimeGpusGraphQLField,
    PodRuntimeGraphQLField,
    PodRuntimePortsGraphQLField,
    PodTelemetryGraphQLField,
    PodTemplateGraphQLField,
    SavingsPlanGraphQLField,
    SecretGraphQLField,
    SpecificsGraphQLField,
    SpendDetailsGraphQLField,
    StripeReloadTransactionGraphQLField,
    TeamGraphQLField,
    TeamInviteGraphQLField,
    TeamInviteOwnerGraphQLField,
    TeamInviteTeamGraphQLField,
    TeamMembershipGraphQLField,
    TeamScopesGraphQLField,
    UserBillingGraphQLField,
    UserCpuCloudBillingGraphQLField,
    UserGpuCloudBillingGraphQLField,
    UserGraphQLField,
    UserInformationGraphQLField,
    UserReferralGraphQLField,
    UserReferralMonthGraphQLField,
    UserRunpodEndpointBillingGraphQLField,
    UserServerlessBillingGraphQLField,
    UserStorageBillingGraphQLField,
    UserSummaryBillingGraphQLField,
    WebhookRequestStatusGraphQLField,
    WorkerStateGraphQLField,
)
from .input_types import (
    EarningsCustomRangeInput,
    GpuAvailabilityInput,
    GpuLowestPriceInput,
    NetworkStorageEarningInput,
    SpecificsInput,
    UserBillingInput,
    UserMachinesFilter,
    UserServerlessBillingInput,
    WebhookRequestsInput,
    WorkerStateInput,
    backgroundPodTelemetryInput,
)


class ApiKeyFields(GraphQLField):
    id: "ApiKeyGraphQLField" = ApiKeyGraphQLField("id")
    permissions: "ApiKeyGraphQLField" = ApiKeyGraphQLField("permissions")
    created_at: "ApiKeyGraphQLField" = ApiKeyGraphQLField("createdAt")
    last_used: "ApiKeyGraphQLField" = ApiKeyGraphQLField("lastUsed")
    name: "ApiKeyGraphQLField" = ApiKeyGraphQLField("name")

    def fields(self, *subfields: ApiKeyGraphQLField) -> "ApiKeyFields":
        """Subfields should come from the ApiKeyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ApiKeyFields":
        self._alias = alias
        return self


class AuditLogFields(GraphQLField):
    actor_id: "AuditLogGraphQLField" = AuditLogGraphQLField("actorId")
    email: "AuditLogGraphQLField" = AuditLogGraphQLField("email")
    owner_id: "AuditLogGraphQLField" = AuditLogGraphQLField("ownerId")
    resource_type: "AuditLogGraphQLField" = AuditLogGraphQLField("resourceType")
    resource_id: "AuditLogGraphQLField" = AuditLogGraphQLField("resourceId")
    action: "AuditLogGraphQLField" = AuditLogGraphQLField("action")
    value: "AuditLogGraphQLField" = AuditLogGraphQLField("value")
    timestamp: "AuditLogGraphQLField" = AuditLogGraphQLField("timestamp")

    def fields(self, *subfields: AuditLogGraphQLField) -> "AuditLogFields":
        """Subfields should come from the AuditLogFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AuditLogFields":
        self._alias = alias
        return self


class AuditLogConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "AuditLogFields":
        return AuditLogFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            AuditLogConnectionGraphQLField, "AuditLogFields", "PageInfoFields"
        ]
    ) -> "AuditLogConnectionFields":
        """Subfields should come from the AuditLogConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AuditLogConnectionFields":
        self._alias = alias
        return self


class BenchmarkPodFields(GraphQLField):
    id: "BenchmarkPodGraphQLField" = BenchmarkPodGraphQLField("id")
    desired_status: "BenchmarkPodGraphQLField" = BenchmarkPodGraphQLField(
        "desiredStatus"
    )

    def fields(self, *subfields: BenchmarkPodGraphQLField) -> "BenchmarkPodFields":
        """Subfields should come from the BenchmarkPodFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BenchmarkPodFields":
        self._alias = alias
        return self


class ClientCreditChargeFields(GraphQLField):
    amount: "ClientCreditChargeGraphQLField" = ClientCreditChargeGraphQLField("amount")
    updated_at: "ClientCreditChargeGraphQLField" = ClientCreditChargeGraphQLField(
        "updatedAt"
    )
    disk_charges: "ClientCreditChargeGraphQLField" = ClientCreditChargeGraphQLField(
        "diskCharges"
    )
    pod_charges: "ClientCreditChargeGraphQLField" = ClientCreditChargeGraphQLField(
        "podCharges"
    )
    api_charges: "ClientCreditChargeGraphQLField" = ClientCreditChargeGraphQLField(
        "apiCharges"
    )
    serverless_charges: "ClientCreditChargeGraphQLField" = (
        ClientCreditChargeGraphQLField("serverlessCharges")
    )
    type: "ClientCreditChargeGraphQLField" = ClientCreditChargeGraphQLField("type")

    def fields(
        self, *subfields: ClientCreditChargeGraphQLField
    ) -> "ClientCreditChargeFields":
        """Subfields should come from the ClientCreditChargeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClientCreditChargeFields":
        self._alias = alias
        return self


class ContainerRegistryAuthFields(GraphQLField):
    id: "ContainerRegistryAuthGraphQLField" = ContainerRegistryAuthGraphQLField("id")
    name: "ContainerRegistryAuthGraphQLField" = ContainerRegistryAuthGraphQLField(
        "name"
    )
    user_id: "ContainerRegistryAuthGraphQLField" = ContainerRegistryAuthGraphQLField(
        "userId"
    )
    registry_auth: "ContainerRegistryAuthGraphQLField" = (
        ContainerRegistryAuthGraphQLField("registryAuth")
    )

    def fields(
        self, *subfields: ContainerRegistryAuthGraphQLField
    ) -> "ContainerRegistryAuthFields":
        """Subfields should come from the ContainerRegistryAuthFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ContainerRegistryAuthFields":
        self._alias = alias
        return self


class CpuFlavorFields(GraphQLField):
    id: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField("id")
    group_id: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField("groupId")
    group_name: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField("groupName")
    display_name: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField("displayName")
    min_vcpu: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField("minVcpu")
    max_vcpu: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField("maxVcpu")
    vcpu_burstable: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField("vcpuBurstable")
    ram_multiplier: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField("ramMultiplier")
    disk_limit_per_vcpu: "CpuFlavorGraphQLField" = CpuFlavorGraphQLField(
        "diskLimitPerVcpu"
    )

    @classmethod
    def specifics(cls, *, input: Optional[SpecificsInput] = None) -> "SpecificsFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SpecificsInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SpecificsFields("specifics", arguments=cleared_arguments)

    def fields(
        self, *subfields: Union[CpuFlavorGraphQLField, "SpecificsFields"]
    ) -> "CpuFlavorFields":
        """Subfields should come from the CpuFlavorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CpuFlavorFields":
        self._alias = alias
        return self


class CpuTypeFields(GraphQLField):
    id: "CpuTypeGraphQLField" = CpuTypeGraphQLField("id")
    display_name: "CpuTypeGraphQLField" = CpuTypeGraphQLField("displayName")
    manufacturer: "CpuTypeGraphQLField" = CpuTypeGraphQLField("manufacturer")
    cores: "CpuTypeGraphQLField" = CpuTypeGraphQLField("cores")
    threads_per_core: "CpuTypeGraphQLField" = CpuTypeGraphQLField("threadsPerCore")
    group_id: "CpuTypeGraphQLField" = CpuTypeGraphQLField("groupId")

    def fields(self, *subfields: CpuTypeGraphQLField) -> "CpuTypeFields":
        """Subfields should come from the CpuTypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CpuTypeFields":
        self._alias = alias
        return self


class CreditCodeFields(GraphQLField):
    id: "CreditCodeGraphQLField" = CreditCodeGraphQLField("id")
    issuer_id: "CreditCodeGraphQLField" = CreditCodeGraphQLField("issuerId")
    created_at: "CreditCodeGraphQLField" = CreditCodeGraphQLField("createdAt")
    redeemed_at: "CreditCodeGraphQLField" = CreditCodeGraphQLField("redeemedAt")
    amount: "CreditCodeGraphQLField" = CreditCodeGraphQLField("amount")

    def fields(self, *subfields: CreditCodeGraphQLField) -> "CreditCodeFields":
        """Subfields should come from the CreditCodeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreditCodeFields":
        self._alias = alias
        return self


class DataCenterFields(GraphQLField):
    id: "DataCenterGraphQLField" = DataCenterGraphQLField("id")
    name: "DataCenterGraphQLField" = DataCenterGraphQLField("name")
    location: "DataCenterGraphQLField" = DataCenterGraphQLField("location")

    @classmethod
    def storage(cls) -> "DataCenterStorageFields":
        return DataCenterStorageFields("storage")

    storage_support: "DataCenterGraphQLField" = DataCenterGraphQLField("storageSupport")
    listed: "DataCenterGraphQLField" = DataCenterGraphQLField("listed")

    @classmethod
    def gpu_availability(
        cls, *, input: Optional[GpuAvailabilityInput] = None
    ) -> "GpuAvailabilityFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "GpuAvailabilityInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GpuAvailabilityFields("gpu_availability", arguments=cleared_arguments)

    compliance: "DataCenterGraphQLField" = DataCenterGraphQLField("compliance")

    def fields(
        self,
        *subfields: Union[
            DataCenterGraphQLField, "DataCenterStorageFields", "GpuAvailabilityFields"
        ]
    ) -> "DataCenterFields":
        """Subfields should come from the DataCenterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataCenterFields":
        self._alias = alias
        return self


class DataCenterStorageFields(GraphQLField):
    hostname: "DataCenterStorageGraphQLField" = DataCenterStorageGraphQLField(
        "hostname"
    )
    ips: "DataCenterStorageGraphQLField" = DataCenterStorageGraphQLField("ips")
    pw: "DataCenterStorageGraphQLField" = DataCenterStorageGraphQLField("pw")
    type: "DataCenterStorageGraphQLField" = DataCenterStorageGraphQLField("type")
    user: "DataCenterStorageGraphQLField" = DataCenterStorageGraphQLField("user")

    @classmethod
    def list(cls) -> "DataCenterStorageListFields":
        return DataCenterStorageListFields("list")

    def fields(
        self,
        *subfields: Union[DataCenterStorageGraphQLField, "DataCenterStorageListFields"]
    ) -> "DataCenterStorageFields":
        """Subfields should come from the DataCenterStorageFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataCenterStorageFields":
        self._alias = alias
        return self


class DataCenterStorageListFields(GraphQLField):
    mnt: "DataCenterStorageListGraphQLField" = DataCenterStorageListGraphQLField("mnt")
    pw: "DataCenterStorageListGraphQLField" = DataCenterStorageListGraphQLField("pw")
    servers: "DataCenterStorageListGraphQLField" = DataCenterStorageListGraphQLField(
        "servers"
    )
    type: "DataCenterStorageListGraphQLField" = DataCenterStorageListGraphQLField(
        "type"
    )
    versions: "DataCenterStorageListGraphQLField" = DataCenterStorageListGraphQLField(
        "versions"
    )
    primary: "DataCenterStorageListGraphQLField" = DataCenterStorageListGraphQLField(
        "primary"
    )

    def fields(
        self, *subfields: DataCenterStorageListGraphQLField
    ) -> "DataCenterStorageListFields":
        """Subfields should come from the DataCenterStorageListFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataCenterStorageListFields":
        self._alias = alias
        return self


class DiscountFields(GraphQLField):
    user_id: "DiscountGraphQLField" = DiscountGraphQLField("userId")
    type: "DiscountGraphQLField" = DiscountGraphQLField("type")
    discount_factor: "DiscountGraphQLField" = DiscountGraphQLField("discountFactor")
    expiration_date: "DiscountGraphQLField" = DiscountGraphQLField("expirationDate")
    active_discount_factor: "DiscountGraphQLField" = DiscountGraphQLField(
        "activeDiscountFactor"
    )
    active_workers: "DiscountGraphQLField" = DiscountGraphQLField("activeWorkers")

    def fields(self, *subfields: DiscountGraphQLField) -> "DiscountFields":
        """Subfields should come from the DiscountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscountFields":
        self._alias = alias
        return self


class EndpointFields(GraphQLField):
    ai_key: "EndpointGraphQLField" = EndpointGraphQLField("aiKey")
    gpu_ids: "EndpointGraphQLField" = EndpointGraphQLField("gpuIds")
    id: "EndpointGraphQLField" = EndpointGraphQLField("id")
    idle_timeout: "EndpointGraphQLField" = EndpointGraphQLField("idleTimeout")
    name: "EndpointGraphQLField" = EndpointGraphQLField("name")
    network_volume_id: "EndpointGraphQLField" = EndpointGraphQLField("networkVolumeId")
    locations: "EndpointGraphQLField" = EndpointGraphQLField("locations")

    @classmethod
    def pods(cls) -> "PodFields":
        return PodFields("pods")

    scaler_type: "EndpointGraphQLField" = EndpointGraphQLField("scalerType")
    scaler_value: "EndpointGraphQLField" = EndpointGraphQLField("scalerValue")

    @classmethod
    def template(cls) -> "PodTemplateFields":
        return PodTemplateFields("template")

    template_id: "EndpointGraphQLField" = EndpointGraphQLField("templateId")
    type: "EndpointGraphQLField" = EndpointGraphQLField("type")
    user_id: "EndpointGraphQLField" = EndpointGraphQLField("userId")
    version: "EndpointGraphQLField" = EndpointGraphQLField("version")
    workers_max: "EndpointGraphQLField" = EndpointGraphQLField("workersMax")
    workers_min: "EndpointGraphQLField" = EndpointGraphQLField("workersMin")
    workers_standby: "EndpointGraphQLField" = EndpointGraphQLField("workersStandby")
    gpu_count: "EndpointGraphQLField" = EndpointGraphQLField("gpuCount")

    @classmethod
    def env(cls) -> "EnvironmentVariableFields":
        return EnvironmentVariableFields("env")

    created_at: "EndpointGraphQLField" = EndpointGraphQLField("createdAt")
    allowed_cuda_versions: "EndpointGraphQLField" = EndpointGraphQLField(
        "allowedCudaVersions"
    )
    execution_timeout_ms: "EndpointGraphQLField" = EndpointGraphQLField(
        "executionTimeoutMs"
    )
    instance_ids: "EndpointGraphQLField" = EndpointGraphQLField("instanceIds")
    compute_type: "EndpointGraphQLField" = EndpointGraphQLField("computeType")

    @classmethod
    def worker_state(cls, input: WorkerStateInput) -> "WorkerStateFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "WorkerStateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkerStateFields("worker_state", arguments=cleared_arguments)

    @classmethod
    def webhook_requests(
        cls, input: WebhookRequestsInput
    ) -> "WebhookRequestStatusFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "WebhookRequestsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WebhookRequestStatusFields(
            "webhook_requests", arguments=cleared_arguments
        )

    @classmethod
    def network_volume(cls) -> "NetworkVolumeFields":
        return NetworkVolumeFields("network_volume")

    def fields(
        self,
        *subfields: Union[
            EndpointGraphQLField,
            "EnvironmentVariableFields",
            "NetworkVolumeFields",
            "PodFields",
            "PodTemplateFields",
            "WebhookRequestStatusFields",
            "WorkerStateFields",
        ]
    ) -> "EndpointFields":
        """Subfields should come from the EndpointFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EndpointFields":
        self._alias = alias
        return self


class EnvironmentVariableFields(GraphQLField):
    key: "EnvironmentVariableGraphQLField" = EnvironmentVariableGraphQLField("key")
    value: "EnvironmentVariableGraphQLField" = EnvironmentVariableGraphQLField("value")

    def fields(
        self, *subfields: EnvironmentVariableGraphQLField
    ) -> "EnvironmentVariableFields":
        """Subfields should come from the EnvironmentVariableFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnvironmentVariableFields":
        self._alias = alias
        return self


class GpuFields(GraphQLField):
    id: "GpuGraphQLField" = GpuGraphQLField("id")
    pod_id: "GpuGraphQLField" = GpuGraphQLField("podId")

    def fields(self, *subfields: GpuGraphQLField) -> "GpuFields":
        """Subfields should come from the GpuFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GpuFields":
        self._alias = alias
        return self


class GpuAvailabilityFields(GraphQLField):
    available: "GpuAvailabilityGraphQLField" = GpuAvailabilityGraphQLField("available")
    stock_status: "GpuAvailabilityGraphQLField" = GpuAvailabilityGraphQLField(
        "stockStatus"
    )
    gpu_type_id: "GpuAvailabilityGraphQLField" = GpuAvailabilityGraphQLField(
        "gpuTypeId"
    )

    @classmethod
    def gpu_type(cls) -> "GpuTypeFields":
        return GpuTypeFields("gpu_type")

    gpu_type_display_name: "GpuAvailabilityGraphQLField" = GpuAvailabilityGraphQLField(
        "gpuTypeDisplayName"
    )
    display_name: "GpuAvailabilityGraphQLField" = GpuAvailabilityGraphQLField(
        "displayName"
    )
    id: "GpuAvailabilityGraphQLField" = GpuAvailabilityGraphQLField("id")

    def fields(
        self, *subfields: Union[GpuAvailabilityGraphQLField, "GpuTypeFields"]
    ) -> "GpuAvailabilityFields":
        """Subfields should come from the GpuAvailabilityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GpuAvailabilityFields":
        self._alias = alias
        return self


class GpuTelemetryFields(GraphQLField):
    id: "GpuTelemetryGraphQLField" = GpuTelemetryGraphQLField("id")
    percent_utilization: "GpuTelemetryGraphQLField" = GpuTelemetryGraphQLField(
        "percentUtilization"
    )
    temperature_celcius: "GpuTelemetryGraphQLField" = GpuTelemetryGraphQLField(
        "temperatureCelcius"
    )
    memory_utilization: "GpuTelemetryGraphQLField" = GpuTelemetryGraphQLField(
        "memoryUtilization"
    )
    power_watts: "GpuTelemetryGraphQLField" = GpuTelemetryGraphQLField("powerWatts")

    def fields(self, *subfields: GpuTelemetryGraphQLField) -> "GpuTelemetryFields":
        """Subfields should come from the GpuTelemetryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GpuTelemetryFields":
        self._alias = alias
        return self


class GpuTypeFields(GraphQLField):
    @classmethod
    def lowest_price(
        cls, *, input: Optional[GpuLowestPriceInput] = None
    ) -> "LowestPriceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "GpuLowestPriceInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LowestPriceFields("lowest_price", arguments=cleared_arguments)

    max_gpu_count: "GpuTypeGraphQLField" = GpuTypeGraphQLField("maxGpuCount")
    max_gpu_count_community_cloud: "GpuTypeGraphQLField" = GpuTypeGraphQLField(
        "maxGpuCountCommunityCloud"
    )
    max_gpu_count_secure_cloud: "GpuTypeGraphQLField" = GpuTypeGraphQLField(
        "maxGpuCountSecureCloud"
    )
    min_pod_gpu_count: "GpuTypeGraphQLField" = GpuTypeGraphQLField("minPodGpuCount")
    id: "GpuTypeGraphQLField" = GpuTypeGraphQLField("id")
    display_name: "GpuTypeGraphQLField" = GpuTypeGraphQLField("displayName")
    manufacturer: "GpuTypeGraphQLField" = GpuTypeGraphQLField("manufacturer")
    memory_in_gb: "GpuTypeGraphQLField" = GpuTypeGraphQLField("memoryInGb")
    cuda_cores: "GpuTypeGraphQLField" = GpuTypeGraphQLField("cudaCores")
    secure_cloud: "GpuTypeGraphQLField" = GpuTypeGraphQLField("secureCloud")
    community_cloud: "GpuTypeGraphQLField" = GpuTypeGraphQLField("communityCloud")
    secure_price: "GpuTypeGraphQLField" = GpuTypeGraphQLField("securePrice")
    community_price: "GpuTypeGraphQLField" = GpuTypeGraphQLField("communityPrice")
    one_month_price: "GpuTypeGraphQLField" = GpuTypeGraphQLField("oneMonthPrice")
    three_month_price: "GpuTypeGraphQLField" = GpuTypeGraphQLField("threeMonthPrice")
    six_month_price: "GpuTypeGraphQLField" = GpuTypeGraphQLField("sixMonthPrice")
    one_week_price: "GpuTypeGraphQLField" = GpuTypeGraphQLField("oneWeekPrice")
    community_spot_price: "GpuTypeGraphQLField" = GpuTypeGraphQLField(
        "communitySpotPrice"
    )
    secure_spot_price: "GpuTypeGraphQLField" = GpuTypeGraphQLField("secureSpotPrice")

    def fields(
        self, *subfields: Union[GpuTypeGraphQLField, "LowestPriceFields"]
    ) -> "GpuTypeFields":
        """Subfields should come from the GpuTypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GpuTypeFields":
        self._alias = alias
        return self


class ImpersonationFields(GraphQLField):
    @classmethod
    def audit_logs(cls) -> "AuditLogConnectionFields":
        return AuditLogConnectionFields("audit_logs")

    id: "ImpersonationGraphQLField" = ImpersonationGraphQLField("id")
    zendesk_ticket_id: "ImpersonationGraphQLField" = ImpersonationGraphQLField(
        "zendeskTicketId"
    )
    impersonate_user_id: "ImpersonationGraphQLField" = ImpersonationGraphQLField(
        "impersonateUserId"
    )
    created_at: "ImpersonationGraphQLField" = ImpersonationGraphQLField("createdAt")
    expires_at: "ImpersonationGraphQLField" = ImpersonationGraphQLField("expiresAt")
    accepted: "ImpersonationGraphQLField" = ImpersonationGraphQLField("accepted")
    accepted_at: "ImpersonationGraphQLField" = ImpersonationGraphQLField("acceptedAt")

    def fields(
        self, *subfields: Union[ImpersonationGraphQLField, "AuditLogConnectionFields"]
    ) -> "ImpersonationFields":
        """Subfields should come from the ImpersonationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ImpersonationFields":
        self._alias = alias
        return self


class LowestPriceFields(GraphQLField):
    gpu_name: "LowestPriceGraphQLField" = LowestPriceGraphQLField("gpuName")
    gpu_type_id: "LowestPriceGraphQLField" = LowestPriceGraphQLField("gpuTypeId")
    minimum_bid_price: "LowestPriceGraphQLField" = LowestPriceGraphQLField(
        "minimumBidPrice"
    )
    uninterruptable_price: "LowestPriceGraphQLField" = LowestPriceGraphQLField(
        "uninterruptablePrice"
    )
    min_memory: "LowestPriceGraphQLField" = LowestPriceGraphQLField("minMemory")
    min_vcpu: "LowestPriceGraphQLField" = LowestPriceGraphQLField("minVcpu")
    rental_percentage: "LowestPriceGraphQLField" = LowestPriceGraphQLField(
        "rentalPercentage"
    )
    rented_count: "LowestPriceGraphQLField" = LowestPriceGraphQLField("rentedCount")
    total_count: "LowestPriceGraphQLField" = LowestPriceGraphQLField("totalCount")
    stock_status: "LowestPriceGraphQLField" = LowestPriceGraphQLField("stockStatus")
    min_download: "LowestPriceGraphQLField" = LowestPriceGraphQLField("minDownload")
    min_disk: "LowestPriceGraphQLField" = LowestPriceGraphQLField("minDisk")
    min_upload: "LowestPriceGraphQLField" = LowestPriceGraphQLField("minUpload")
    country_code: "LowestPriceGraphQLField" = LowestPriceGraphQLField("countryCode")
    support_public_ip: "LowestPriceGraphQLField" = LowestPriceGraphQLField(
        "supportPublicIp"
    )
    compliance: "LowestPriceGraphQLField" = LowestPriceGraphQLField("compliance")

    def fields(self, *subfields: LowestPriceGraphQLField) -> "LowestPriceFields":
        """Subfields should come from the LowestPriceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LowestPriceFields":
        self._alias = alias
        return self


class MachineFields(GraphQLField):
    @classmethod
    def pods(cls) -> "PodFields":
        return PodFields("pods")

    id: "MachineGraphQLField" = MachineGraphQLField("id")
    user_id: "MachineGraphQLField" = MachineGraphQLField("userId")
    name: "MachineGraphQLField" = MachineGraphQLField("name")
    registered: "MachineGraphQLField" = MachineGraphQLField("registered")
    ai_api_only: "MachineGraphQLField" = MachineGraphQLField("aiApiOnly")
    priority: "MachineGraphQLField" = MachineGraphQLField("priority")
    min_pod_gpu_count: "MachineGraphQLField" = MachineGraphQLField("minPodGpuCount")
    gpu_type_id: "MachineGraphQLField" = MachineGraphQLField("gpuTypeId")

    @classmethod
    def gpu_type(cls) -> "GpuTypeFields":
        return GpuTypeFields("gpu_type")

    gpu_power_limit_percentage_rented: "MachineGraphQLField" = MachineGraphQLField(
        "gpuPowerLimitPercentageRented"
    )
    gpu_power_limit_percentage_self: "MachineGraphQLField" = MachineGraphQLField(
        "gpuPowerLimitPercentageSelf"
    )
    cpu_count: "MachineGraphQLField" = MachineGraphQLField("cpuCount")
    cpu_type_id: "MachineGraphQLField" = MachineGraphQLField("cpuTypeId")

    @classmethod
    def cpu_type(cls) -> "CpuTypeFields":
        return CpuTypeFields("cpu_type")

    @classmethod
    def data_center(cls) -> "DataCenterFields":
        return DataCenterFields("data_center")

    mobo_name: "MachineGraphQLField" = MachineGraphQLField("moboName")
    hidden: "MachineGraphQLField" = MachineGraphQLField("hidden")
    host_price_per_gpu: "MachineGraphQLField" = MachineGraphQLField("hostPricePerGpu")
    host_min_bid_per_gpu: "MachineGraphQLField" = MachineGraphQLField(
        "hostMinBidPerGpu"
    )
    default_image_name: "MachineGraphQLField" = MachineGraphQLField("defaultImageName")
    default_start_script: "MachineGraphQLField" = MachineGraphQLField(
        "defaultStartScript"
    )
    default_arguments: "MachineGraphQLField" = MachineGraphQLField("defaultArguments")
    default_disk_in_gb: "MachineGraphQLField" = MachineGraphQLField("defaultDiskInGb")
    default_port: "MachineGraphQLField" = MachineGraphQLField("defaultPort")
    default_env: "MachineGraphQLField" = MachineGraphQLField("defaultEnv")
    location: "MachineGraphQLField" = MachineGraphQLField("location")
    listed: "MachineGraphQLField" = MachineGraphQLField("listed")
    verified: "MachineGraphQLField" = MachineGraphQLField("verified")
    machine_id: "MachineGraphQLField" = MachineGraphQLField("machineId")
    disk_reserved: "MachineGraphQLField" = MachineGraphQLField("diskReserved")
    disk_total: "MachineGraphQLField" = MachineGraphQLField("diskTotal")
    disk_m_bps: "MachineGraphQLField" = MachineGraphQLField("diskMBps")
    download_mbps: "MachineGraphQLField" = MachineGraphQLField("downloadMbps")
    gpu_reserved: "MachineGraphQLField" = MachineGraphQLField("gpuReserved")
    gpu_total: "MachineGraphQLField" = MachineGraphQLField("gpuTotal")
    pcie_link: "MachineGraphQLField" = MachineGraphQLField("pcieLink")
    pcie_link_width: "MachineGraphQLField" = MachineGraphQLField("pcieLinkWidth")
    memory_reserved: "MachineGraphQLField" = MachineGraphQLField("memoryReserved")
    memory_total: "MachineGraphQLField" = MachineGraphQLField("memoryTotal")
    upload_mbps: "MachineGraphQLField" = MachineGraphQLField("uploadMbps")
    vcpu_reserved: "MachineGraphQLField" = MachineGraphQLField("vcpuReserved")
    vcpu_total: "MachineGraphQLField" = MachineGraphQLField("vcpuTotal")
    install_cert: "MachineGraphQLField" = MachineGraphQLField("installCert")
    uptime_percent_listed_one_week: "MachineGraphQLField" = MachineGraphQLField(
        "uptimePercentListedOneWeek"
    )
    uptime_percent_listed_four_week: "MachineGraphQLField" = MachineGraphQLField(
        "uptimePercentListedFourWeek"
    )
    uptime_percent_listed_twelve_week: "MachineGraphQLField" = MachineGraphQLField(
        "uptimePercentListedTwelveWeek"
    )
    uptime_percent_absolute_twelve_week: "MachineGraphQLField" = MachineGraphQLField(
        "uptimePercentAbsoluteTwelveWeek"
    )
    margin: "MachineGraphQLField" = MachineGraphQLField("margin")
    gpu_cloud_price: "MachineGraphQLField" = MachineGraphQLField("gpuCloudPrice")
    support_public_ip: "MachineGraphQLField" = MachineGraphQLField("supportPublicIp")
    secure_cloud: "MachineGraphQLField" = MachineGraphQLField("secureCloud")
    owned_by_me: "MachineGraphQLField" = MachineGraphQLField("ownedByMe")
    idle_job_template_id: "MachineGraphQLField" = MachineGraphQLField(
        "idleJobTemplateId"
    )

    @classmethod
    def idle_job_template(cls) -> "PodTemplateFields":
        return PodTemplateFields("idle_job_template")

    maintenance_start: "MachineGraphQLField" = MachineGraphQLField("maintenanceStart")
    maintenance_end: "MachineGraphQLField" = MachineGraphQLField("maintenanceEnd")
    maintenance_note: "MachineGraphQLField" = MachineGraphQLField("maintenanceNote")
    maintenance_mode: "MachineGraphQLField" = MachineGraphQLField("maintenanceMode")
    note: "MachineGraphQLField" = MachineGraphQLField("note")

    @classmethod
    def machine_balance(cls) -> "MachineBalanceFields":
        return MachineBalanceFields("machine_balance")

    @classmethod
    def machine_system(cls) -> "MachineSystemFields":
        return MachineSystemFields("machine_system")

    data_center_id: "MachineGraphQLField" = MachineGraphQLField("dataCenterId")
    machine_type: "MachineGraphQLField" = MachineGraphQLField("machineType")

    @classmethod
    def last_benchmark(cls) -> "MachineBenchmarkFields":
        return MachineBenchmarkFields("last_benchmark")

    @classmethod
    def upcoming_maintenances(cls) -> "MachineMaintenanceFields":
        return MachineMaintenanceFields("upcoming_maintenances")

    @classmethod
    def next_maintenance(cls) -> "MachineMaintenanceFields":
        return MachineMaintenanceFields("next_maintenance")

    @classmethod
    def background_pod_telemetry(
        cls, *, input: Optional[backgroundPodTelemetryInput] = None
    ) -> "PodTelemetryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "backgroundPodTelemetryInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PodTelemetryFields(
            "background_pod_telemetry", arguments=cleared_arguments
        )

    @classmethod
    def latest_telemetry(cls) -> "MachineTelemetryFields":
        return MachineTelemetryFields("latest_telemetry")

    @classmethod
    def uptime(cls) -> "MachineUptimeFields":
        return MachineUptimeFields("uptime")

    runpod_ip: "MachineGraphQLField" = MachineGraphQLField("runpodIp")
    public_ip: "MachineGraphQLField" = MachineGraphQLField("publicIp")

    def fields(
        self,
        *subfields: Union[
            MachineGraphQLField,
            "CpuTypeFields",
            "DataCenterFields",
            "GpuTypeFields",
            "MachineBalanceFields",
            "MachineBenchmarkFields",
            "MachineMaintenanceFields",
            "MachineSystemFields",
            "MachineTelemetryFields",
            "MachineUptimeFields",
            "PodFields",
            "PodTelemetryFields",
            "PodTemplateFields",
        ]
    ) -> "MachineFields":
        """Subfields should come from the MachineFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineFields":
        self._alias = alias
        return self


class MachineBalanceFields(GraphQLField):
    host_disk_earnings: "MachineBalanceGraphQLField" = MachineBalanceGraphQLField(
        "hostDiskEarnings"
    )
    host_gpu_earnings: "MachineBalanceGraphQLField" = MachineBalanceGraphQLField(
        "hostGpuEarnings"
    )
    host_total_earnings: "MachineBalanceGraphQLField" = MachineBalanceGraphQLField(
        "hostTotalEarnings"
    )

    def fields(self, *subfields: MachineBalanceGraphQLField) -> "MachineBalanceFields":
        """Subfields should come from the MachineBalanceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineBalanceFields":
        self._alias = alias
        return self


class MachineBenchmarkFields(GraphQLField):
    errors: "MachineBenchmarkGraphQLField" = MachineBenchmarkGraphQLField("errors")
    benchmarked_at: "MachineBenchmarkGraphQLField" = MachineBenchmarkGraphQLField(
        "benchmarkedAt"
    )
    gpu_count: "MachineBenchmarkGraphQLField" = MachineBenchmarkGraphQLField("gpuCount")

    @classmethod
    def pod(cls) -> "BenchmarkPodFields":
        return BenchmarkPodFields("pod")

    def fields(
        self, *subfields: Union[MachineBenchmarkGraphQLField, "BenchmarkPodFields"]
    ) -> "MachineBenchmarkFields":
        """Subfields should come from the MachineBenchmarkFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineBenchmarkFields":
        self._alias = alias
        return self


class MachineEarningFields(GraphQLField):
    name: "MachineEarningGraphQLField" = MachineEarningGraphQLField("name")
    date: "MachineEarningGraphQLField" = MachineEarningGraphQLField("date")
    machine_id: "MachineEarningGraphQLField" = MachineEarningGraphQLField("machineId")
    host_total_earnings: "MachineEarningGraphQLField" = MachineEarningGraphQLField(
        "hostTotalEarnings"
    )
    host_gpu_earnings: "MachineEarningGraphQLField" = MachineEarningGraphQLField(
        "hostGpuEarnings"
    )
    host_disk_earnings: "MachineEarningGraphQLField" = MachineEarningGraphQLField(
        "hostDiskEarnings"
    )

    def fields(self, *subfields: MachineEarningGraphQLField) -> "MachineEarningFields":
        """Subfields should come from the MachineEarningFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineEarningFields":
        self._alias = alias
        return self


class MachineMaintenanceFields(GraphQLField):
    id: "MachineMaintenanceGraphQLField" = MachineMaintenanceGraphQLField("id")
    machine_id: "MachineMaintenanceGraphQLField" = MachineMaintenanceGraphQLField(
        "machineId"
    )
    maintenance_start: "MachineMaintenanceGraphQLField" = (
        MachineMaintenanceGraphQLField("maintenanceStart")
    )
    maintenance_end: "MachineMaintenanceGraphQLField" = MachineMaintenanceGraphQLField(
        "maintenanceEnd"
    )
    maintenance_note: "MachineMaintenanceGraphQLField" = MachineMaintenanceGraphQLField(
        "maintenanceNote"
    )

    def fields(
        self, *subfields: MachineMaintenanceGraphQLField
    ) -> "MachineMaintenanceFields":
        """Subfields should come from the MachineMaintenanceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineMaintenanceFields":
        self._alias = alias
        return self


class MachineSummaryFields(GraphQLField):
    cpu_type_id: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("cpuTypeId")
    disk_profit_per_hr: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField(
        "diskProfitPerHr"
    )
    display_name: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField(
        "displayName"
    )
    gpu_total: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("gpuTotal")
    gpu_type_id: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("gpuTypeId")
    id: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("id")
    listed: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("listed")
    machine_type: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField(
        "machineType"
    )
    on_demand_pods: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField(
        "onDemandPods"
    )
    pod_profit_per_hr: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField(
        "podProfitPerHr"
    )
    spot_pods: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("spotPods")
    gpu_rented: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("gpuRented")
    cpu_rented: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("cpuRented")
    vcpu_total: "MachineSummaryGraphQLField" = MachineSummaryGraphQLField("vcpuTotal")

    def fields(self, *subfields: MachineSummaryGraphQLField) -> "MachineSummaryFields":
        """Subfields should come from the MachineSummaryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineSummaryFields":
        self._alias = alias
        return self


class MachineSystemFields(GraphQLField):
    os: "MachineSystemGraphQLField" = MachineSystemGraphQLField("os")
    cuda_version: "MachineSystemGraphQLField" = MachineSystemGraphQLField("cudaVersion")
    disk_total: "MachineSystemGraphQLField" = MachineSystemGraphQLField("diskTotal")
    disk_free: "MachineSystemGraphQLField" = MachineSystemGraphQLField("diskFree")
    docker_version: "MachineSystemGraphQLField" = MachineSystemGraphQLField(
        "dockerVersion"
    )
    kernel_version: "MachineSystemGraphQLField" = MachineSystemGraphQLField(
        "kernelVersion"
    )

    def fields(self, *subfields: MachineSystemGraphQLField) -> "MachineSystemFields":
        """Subfields should come from the MachineSystemFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineSystemFields":
        self._alias = alias
        return self


class MachineTelemetryFields(GraphQLField):
    time: "MachineTelemetryGraphQLField" = MachineTelemetryGraphQLField("time")
    cpu_utilization: "MachineTelemetryGraphQLField" = MachineTelemetryGraphQLField(
        "cpuUtilization"
    )
    memory_utilization: "MachineTelemetryGraphQLField" = MachineTelemetryGraphQLField(
        "memoryUtilization"
    )

    @classmethod
    def average_gpu_metrics(cls) -> "GpuTelemetryFields":
        return GpuTelemetryFields("average_gpu_metrics")

    @classmethod
    def individual_gpu_metrics(cls) -> "GpuTelemetryFields":
        return GpuTelemetryFields("individual_gpu_metrics")

    def fields(
        self, *subfields: Union[MachineTelemetryGraphQLField, "GpuTelemetryFields"]
    ) -> "MachineTelemetryFields":
        """Subfields should come from the MachineTelemetryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineTelemetryFields":
        self._alias = alias
        return self


class MachineUptimeFields(GraphQLField):
    error: "MachineUptimeGraphQLField" = MachineUptimeGraphQLField("error")
    last_sync_timestamp: "MachineUptimeGraphQLField" = MachineUptimeGraphQLField(
        "lastSyncTimestamp"
    )
    seconds: "MachineUptimeGraphQLField" = MachineUptimeGraphQLField("seconds")
    sys_uptime_seconds: "MachineUptimeGraphQLField" = MachineUptimeGraphQLField(
        "sysUptimeSeconds"
    )

    def fields(self, *subfields: MachineUptimeGraphQLField) -> "MachineUptimeFields":
        """Subfields should come from the MachineUptimeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineUptimeFields":
        self._alias = alias
        return self


class NetworkStorageEarningFields(GraphQLField):
    date: "NetworkStorageEarningGraphQLField" = NetworkStorageEarningGraphQLField(
        "date"
    )
    daily_network_volume_earn: "NetworkStorageEarningGraphQLField" = (
        NetworkStorageEarningGraphQLField("dailyNetworkVolumeEarn")
    )
    data_center_id: "NetworkStorageEarningGraphQLField" = (
        NetworkStorageEarningGraphQLField("dataCenterId")
    )
    runpod_earnings: "NetworkStorageEarningGraphQLField" = (
        NetworkStorageEarningGraphQLField("runpodEarnings")
    )

    def fields(
        self, *subfields: NetworkStorageEarningGraphQLField
    ) -> "NetworkStorageEarningFields":
        """Subfields should come from the NetworkStorageEarningFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NetworkStorageEarningFields":
        self._alias = alias
        return self


class NetworkVolumeFields(GraphQLField):
    id: "NetworkVolumeGraphQLField" = NetworkVolumeGraphQLField("id")
    name: "NetworkVolumeGraphQLField" = NetworkVolumeGraphQLField("name")
    size: "NetworkVolumeGraphQLField" = NetworkVolumeGraphQLField("size")
    data_center_id: "NetworkVolumeGraphQLField" = NetworkVolumeGraphQLField(
        "dataCenterId"
    )

    @classmethod
    def data_center(cls) -> "DataCenterFields":
        return DataCenterFields("data_center")

    def fields(
        self, *subfields: Union[NetworkVolumeGraphQLField, "DataCenterFields"]
    ) -> "NetworkVolumeFields":
        """Subfields should come from the NetworkVolumeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NetworkVolumeFields":
        self._alias = alias
        return self


class PageInfoFields(GraphQLField):
    end_cursor: "PageInfoGraphQLField" = PageInfoGraphQLField("endCursor")
    has_next_page: "PageInfoGraphQLField" = PageInfoGraphQLField("hasNextPage")

    def fields(self, *subfields: PageInfoGraphQLField) -> "PageInfoFields":
        """Subfields should come from the PageInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PageInfoFields":
        self._alias = alias
        return self


class PodFields(GraphQLField):
    lowest_bid_price_to_resume: "PodGraphQLField" = PodGraphQLField(
        "lowestBidPriceToResume"
    )
    ai_api_id: "PodGraphQLField" = PodGraphQLField("aiApiId")
    api_key: "PodGraphQLField" = PodGraphQLField("apiKey")
    consumer_user_id: "PodGraphQLField" = PodGraphQLField("consumerUserId")
    container_disk_in_gb: "PodGraphQLField" = PodGraphQLField("containerDiskInGb")
    container_registry_auth_id: "PodGraphQLField" = PodGraphQLField(
        "containerRegistryAuthId"
    )
    cost_multiplier: "PodGraphQLField" = PodGraphQLField("costMultiplier")
    cost_per_hr: "PodGraphQLField" = PodGraphQLField("costPerHr")
    created_at: "PodGraphQLField" = PodGraphQLField("createdAt")
    adjusted_cost_per_hr: "PodGraphQLField" = PodGraphQLField("adjustedCostPerHr")
    desired_status: "PodGraphQLField" = PodGraphQLField("desiredStatus")
    docker_args: "PodGraphQLField" = PodGraphQLField("dockerArgs")
    docker_id: "PodGraphQLField" = PodGraphQLField("dockerId")
    env: "PodGraphQLField" = PodGraphQLField("env")
    gpu_count: "PodGraphQLField" = PodGraphQLField("gpuCount")
    gpu_power_limit_percent: "PodGraphQLField" = PodGraphQLField("gpuPowerLimitPercent")

    @classmethod
    def gpus(cls) -> "GpuFields":
        return GpuFields("gpus")

    id: "PodGraphQLField" = PodGraphQLField("id")
    image_name: "PodGraphQLField" = PodGraphQLField("imageName")
    last_status_change: "PodGraphQLField" = PodGraphQLField("lastStatusChange")
    locked: "PodGraphQLField" = PodGraphQLField("locked")
    machine_id: "PodGraphQLField" = PodGraphQLField("machineId")
    memory_in_gb: "PodGraphQLField" = PodGraphQLField("memoryInGb")
    name: "PodGraphQLField" = PodGraphQLField("name")
    pod_type: "PodGraphQLField" = PodGraphQLField("podType")
    port: "PodGraphQLField" = PodGraphQLField("port")
    ports: "PodGraphQLField" = PodGraphQLField("ports")

    @classmethod
    def registry(cls) -> "PodRegistryFields":
        return PodRegistryFields("registry")

    template_id: "PodGraphQLField" = PodGraphQLField("templateId")
    uptime_seconds: "PodGraphQLField" = PodGraphQLField("uptimeSeconds")
    vcpu_count: "PodGraphQLField" = PodGraphQLField("vcpuCount")
    version: "PodGraphQLField" = PodGraphQLField("version")
    volume_encrypted: "PodGraphQLField" = PodGraphQLField("volumeEncrypted")
    volume_in_gb: "PodGraphQLField" = PodGraphQLField("volumeInGb")
    volume_key: "PodGraphQLField" = PodGraphQLField("volumeKey")
    volume_mount_path: "PodGraphQLField" = PodGraphQLField("volumeMountPath")
    last_started_at: "PodGraphQLField" = PodGraphQLField("lastStartedAt")
    cpu_flavor_id: "PodGraphQLField" = PodGraphQLField("cpuFlavorId")
    machine_type: "PodGraphQLField" = PodGraphQLField("machineType")
    sls_version: "PodGraphQLField" = PodGraphQLField("slsVersion")
    network_volume_id: "PodGraphQLField" = PodGraphQLField("networkVolumeId")

    @classmethod
    def cpu_flavor(cls) -> "CpuFlavorFields":
        return CpuFlavorFields("cpu_flavor")

    @classmethod
    def runtime(cls) -> "PodRuntimeFields":
        return PodRuntimeFields("runtime")

    @classmethod
    def machine(cls) -> "PodMachineInfoFields":
        return PodMachineInfoFields("machine")

    @classmethod
    def latest_telemetry(cls) -> "PodTelemetryFields":
        return PodTelemetryFields("latest_telemetry")

    @classmethod
    def endpoint(cls) -> "EndpointFields":
        return EndpointFields("endpoint")

    @classmethod
    def network_volume(cls) -> "NetworkVolumeFields":
        return NetworkVolumeFields("network_volume")

    @classmethod
    def savings_plans(cls) -> "SavingsPlanFields":
        return SavingsPlanFields("savings_plans")

    def fields(
        self,
        *subfields: Union[
            PodGraphQLField,
            "CpuFlavorFields",
            "EndpointFields",
            "GpuFields",
            "NetworkVolumeFields",
            "PodMachineInfoFields",
            "PodRegistryFields",
            "PodRuntimeFields",
            "PodTelemetryFields",
            "SavingsPlanFields",
        ]
    ) -> "PodFields":
        """Subfields should come from the PodFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodFields":
        self._alias = alias
        return self


class PodMachineInfoFields(GraphQLField):
    id: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("id")
    cost_per_hr: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("costPerHr")
    current_price_per_gpu: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "currentPricePerGpu"
    )
    disk_m_bps: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("diskMBps")
    gpu_available: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "gpuAvailable"
    )
    gpu_display_name: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "gpuDisplayName"
    )
    gpu_type_id: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("gpuTypeId")

    @classmethod
    def gpu_type(cls) -> "GpuTypeFields":
        return GpuTypeFields("gpu_type")

    listed: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("listed")
    location: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("location")
    machine_type: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "machineType"
    )
    maintenance_end: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "maintenanceEnd"
    )
    maintenance_note: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "maintenanceNote"
    )
    maintenance_start: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "maintenanceStart"
    )
    max_download_speed_mbps: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "maxDownloadSpeedMbps"
    )
    max_upload_speed_mbps: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "maxUploadSpeedMbps"
    )
    note: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("note")
    pod_host_id: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("podHostId")
    runpod_ip: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("runpodIp")
    secure_cloud: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "secureCloud"
    )
    support_public_ip: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "supportPublicIp"
    )
    min_pod_gpu_count: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "minPodGpuCount"
    )

    @classmethod
    def machine_system(cls) -> "MachineSystemFields":
        return MachineSystemFields("machine_system")

    data_center_id: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "dataCenterId"
    )
    cpu_type_id: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("cpuTypeId")

    @classmethod
    def cpu_type(cls) -> "CpuTypeFields":
        return CpuTypeFields("cpu_type")

    cpu_count: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("cpuCount")
    vcpu_total: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField("vcpuTotal")
    vcpu_reserved: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "vcpuReserved"
    )
    memory_total: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "memoryTotal"
    )
    memory_reserved: "PodMachineInfoGraphQLField" = PodMachineInfoGraphQLField(
        "memoryReserved"
    )

    def fields(
        self,
        *subfields: Union[
            PodMachineInfoGraphQLField,
            "CpuTypeFields",
            "GpuTypeFields",
            "MachineSystemFields",
        ]
    ) -> "PodMachineInfoFields":
        """Subfields should come from the PodMachineInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodMachineInfoFields":
        self._alias = alias
        return self


class PodRegistryFields(GraphQLField):
    auth: "PodRegistryGraphQLField" = PodRegistryGraphQLField("auth")
    pass_: "PodRegistryGraphQLField" = PodRegistryGraphQLField("pass")
    url: "PodRegistryGraphQLField" = PodRegistryGraphQLField("url")
    user: "PodRegistryGraphQLField" = PodRegistryGraphQLField("user")
    username: "PodRegistryGraphQLField" = PodRegistryGraphQLField("username")

    def fields(self, *subfields: PodRegistryGraphQLField) -> "PodRegistryFields":
        """Subfields should come from the PodRegistryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodRegistryFields":
        self._alias = alias
        return self


class PodRuntimeFields(GraphQLField):
    @classmethod
    def container(cls) -> "PodRuntimeContainerFields":
        return PodRuntimeContainerFields("container")

    @classmethod
    def gpus(cls) -> "PodRuntimeGpusFields":
        return PodRuntimeGpusFields("gpus")

    @classmethod
    def ports(cls) -> "PodRuntimePortsFields":
        return PodRuntimePortsFields("ports")

    uptime_in_seconds: "PodRuntimeGraphQLField" = PodRuntimeGraphQLField(
        "uptimeInSeconds"
    )

    def fields(
        self,
        *subfields: Union[
            PodRuntimeGraphQLField,
            "PodRuntimeContainerFields",
            "PodRuntimeGpusFields",
            "PodRuntimePortsFields",
        ]
    ) -> "PodRuntimeFields":
        """Subfields should come from the PodRuntimeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodRuntimeFields":
        self._alias = alias
        return self


class PodRuntimeContainerFields(GraphQLField):
    cpu_percent: "PodRuntimeContainerGraphQLField" = PodRuntimeContainerGraphQLField(
        "cpuPercent"
    )
    memory_percent: "PodRuntimeContainerGraphQLField" = PodRuntimeContainerGraphQLField(
        "memoryPercent"
    )

    def fields(
        self, *subfields: PodRuntimeContainerGraphQLField
    ) -> "PodRuntimeContainerFields":
        """Subfields should come from the PodRuntimeContainerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodRuntimeContainerFields":
        self._alias = alias
        return self


class PodRuntimeGpusFields(GraphQLField):
    id: "PodRuntimeGpusGraphQLField" = PodRuntimeGpusGraphQLField("id")
    gpu_util_percent: "PodRuntimeGpusGraphQLField" = PodRuntimeGpusGraphQLField(
        "gpuUtilPercent"
    )
    memory_util_percent: "PodRuntimeGpusGraphQLField" = PodRuntimeGpusGraphQLField(
        "memoryUtilPercent"
    )

    def fields(self, *subfields: PodRuntimeGpusGraphQLField) -> "PodRuntimeGpusFields":
        """Subfields should come from the PodRuntimeGpusFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodRuntimeGpusFields":
        self._alias = alias
        return self


class PodRuntimePortsFields(GraphQLField):
    ip: "PodRuntimePortsGraphQLField" = PodRuntimePortsGraphQLField("ip")
    is_ip_public: "PodRuntimePortsGraphQLField" = PodRuntimePortsGraphQLField(
        "isIpPublic"
    )
    private_port: "PodRuntimePortsGraphQLField" = PodRuntimePortsGraphQLField(
        "privatePort"
    )
    public_port: "PodRuntimePortsGraphQLField" = PodRuntimePortsGraphQLField(
        "publicPort"
    )
    type: "PodRuntimePortsGraphQLField" = PodRuntimePortsGraphQLField("type")

    def fields(
        self, *subfields: PodRuntimePortsGraphQLField
    ) -> "PodRuntimePortsFields":
        """Subfields should come from the PodRuntimePortsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodRuntimePortsFields":
        self._alias = alias
        return self


class PodTelemetryFields(GraphQLField):
    state: "PodTelemetryGraphQLField" = PodTelemetryGraphQLField("state")
    time: "PodTelemetryGraphQLField" = PodTelemetryGraphQLField("time")
    cpu_utilization: "PodTelemetryGraphQLField" = PodTelemetryGraphQLField(
        "cpuUtilization"
    )
    memory_utilization: "PodTelemetryGraphQLField" = PodTelemetryGraphQLField(
        "memoryUtilization"
    )

    @classmethod
    def average_gpu_metrics(cls) -> "GpuTelemetryFields":
        return GpuTelemetryFields("average_gpu_metrics")

    @classmethod
    def individual_gpu_metrics(cls) -> "GpuTelemetryFields":
        return GpuTelemetryFields("individual_gpu_metrics")

    last_state_transition_timestamp: "PodTelemetryGraphQLField" = (
        PodTelemetryGraphQLField("lastStateTransitionTimestamp")
    )

    def fields(
        self, *subfields: Union[PodTelemetryGraphQLField, "GpuTelemetryFields"]
    ) -> "PodTelemetryFields":
        """Subfields should come from the PodTelemetryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodTelemetryFields":
        self._alias = alias
        return self


class PodTemplateFields(GraphQLField):
    advanced_start: "PodTemplateGraphQLField" = PodTemplateGraphQLField("advancedStart")
    container_disk_in_gb: "PodTemplateGraphQLField" = PodTemplateGraphQLField(
        "containerDiskInGb"
    )
    container_registry_auth_id: "PodTemplateGraphQLField" = PodTemplateGraphQLField(
        "containerRegistryAuthId"
    )
    docker_args: "PodTemplateGraphQLField" = PodTemplateGraphQLField("dockerArgs")
    earned: "PodTemplateGraphQLField" = PodTemplateGraphQLField("earned")

    @classmethod
    def env(cls) -> "EnvironmentVariableFields":
        return EnvironmentVariableFields("env")

    id: "PodTemplateGraphQLField" = PodTemplateGraphQLField("id")
    image_name: "PodTemplateGraphQLField" = PodTemplateGraphQLField("imageName")
    is_public: "PodTemplateGraphQLField" = PodTemplateGraphQLField("isPublic")
    is_runpod: "PodTemplateGraphQLField" = PodTemplateGraphQLField("isRunpod")
    is_serverless: "PodTemplateGraphQLField" = PodTemplateGraphQLField("isServerless")
    bound_endpoint_id: "PodTemplateGraphQLField" = PodTemplateGraphQLField(
        "boundEndpointId"
    )
    name: "PodTemplateGraphQLField" = PodTemplateGraphQLField("name")
    ports: "PodTemplateGraphQLField" = PodTemplateGraphQLField("ports")
    readme: "PodTemplateGraphQLField" = PodTemplateGraphQLField("readme")
    runtime_in_min: "PodTemplateGraphQLField" = PodTemplateGraphQLField("runtimeInMin")
    start_jupyter: "PodTemplateGraphQLField" = PodTemplateGraphQLField("startJupyter")
    start_script: "PodTemplateGraphQLField" = PodTemplateGraphQLField("startScript")
    start_ssh: "PodTemplateGraphQLField" = PodTemplateGraphQLField("startSsh")
    volume_in_gb: "PodTemplateGraphQLField" = PodTemplateGraphQLField("volumeInGb")
    volume_mount_path: "PodTemplateGraphQLField" = PodTemplateGraphQLField(
        "volumeMountPath"
    )
    config: "PodTemplateGraphQLField" = PodTemplateGraphQLField("config")
    category: "PodTemplateGraphQLField" = PodTemplateGraphQLField("category")

    def fields(
        self, *subfields: Union[PodTemplateGraphQLField, "EnvironmentVariableFields"]
    ) -> "PodTemplateFields":
        """Subfields should come from the PodTemplateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PodTemplateFields":
        self._alias = alias
        return self


class SavingsPlanFields(GraphQLField):
    end_time: "SavingsPlanGraphQLField" = SavingsPlanGraphQLField("endTime")
    start_time: "SavingsPlanGraphQLField" = SavingsPlanGraphQLField("startTime")

    @classmethod
    def gpu_type(cls) -> "GpuTypeFields":
        return GpuTypeFields("gpu_type")

    pod_id: "SavingsPlanGraphQLField" = SavingsPlanGraphQLField("podId")
    gpu_type_id: "SavingsPlanGraphQLField" = SavingsPlanGraphQLField("gpuTypeId")

    @classmethod
    def pod(cls) -> "PodFields":
        return PodFields("pod")

    savings_plan_type: "SavingsPlanGraphQLField" = SavingsPlanGraphQLField(
        "savingsPlanType"
    )
    cost_per_hr: "SavingsPlanGraphQLField" = SavingsPlanGraphQLField("costPerHr")
    upfront_cost: "SavingsPlanGraphQLField" = SavingsPlanGraphQLField("upfrontCost")
    plan_length: "SavingsPlanGraphQLField" = SavingsPlanGraphQLField("planLength")

    def fields(
        self, *subfields: Union[SavingsPlanGraphQLField, "GpuTypeFields", "PodFields"]
    ) -> "SavingsPlanFields":
        """Subfields should come from the SavingsPlanFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavingsPlanFields":
        self._alias = alias
        return self


class SecretFields(GraphQLField):
    id: "SecretGraphQLField" = SecretGraphQLField("id")
    name: "SecretGraphQLField" = SecretGraphQLField("name")
    created_at: "SecretGraphQLField" = SecretGraphQLField("createdAt")
    updated_at: "SecretGraphQLField" = SecretGraphQLField("updatedAt")
    description: "SecretGraphQLField" = SecretGraphQLField("description")
    last_retrieved_at: "SecretGraphQLField" = SecretGraphQLField("lastRetrievedAt")
    last_updated_at: "SecretGraphQLField" = SecretGraphQLField("lastUpdatedAt")

    def fields(self, *subfields: SecretGraphQLField) -> "SecretFields":
        """Subfields should come from the SecretFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecretFields":
        self._alias = alias
        return self


class SpecificsFields(GraphQLField):
    stock_status: "SpecificsGraphQLField" = SpecificsGraphQLField("stockStatus")
    secure_price: "SpecificsGraphQLField" = SpecificsGraphQLField("securePrice")
    sls_price: "SpecificsGraphQLField" = SpecificsGraphQLField("slsPrice")

    def fields(self, *subfields: SpecificsGraphQLField) -> "SpecificsFields":
        """Subfields should come from the SpecificsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpecificsFields":
        self._alias = alias
        return self


class SpendDetailsFields(GraphQLField):
    local_storage_per_hour: "SpendDetailsGraphQLField" = SpendDetailsGraphQLField(
        "localStoragePerHour"
    )
    network_storage_per_hour: "SpendDetailsGraphQLField" = SpendDetailsGraphQLField(
        "networkStoragePerHour"
    )
    gpu_compute_per_hour: "SpendDetailsGraphQLField" = SpendDetailsGraphQLField(
        "gpuComputePerHour"
    )

    def fields(self, *subfields: SpendDetailsGraphQLField) -> "SpendDetailsFields":
        """Subfields should come from the SpendDetailsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpendDetailsFields":
        self._alias = alias
        return self


class StripeReloadTransactionFields(GraphQLField):
    id: "StripeReloadTransactionGraphQLField" = StripeReloadTransactionGraphQLField(
        "id"
    )
    medium_id: "StripeReloadTransactionGraphQLField" = (
        StripeReloadTransactionGraphQLField("mediumId")
    )
    transaction_completed_at: "StripeReloadTransactionGraphQLField" = (
        StripeReloadTransactionGraphQLField("transactionCompletedAt")
    )
    receipt_link: "StripeReloadTransactionGraphQLField" = (
        StripeReloadTransactionGraphQLField("receiptLink")
    )
    amount: "StripeReloadTransactionGraphQLField" = StripeReloadTransactionGraphQLField(
        "amount"
    )
    medium: "StripeReloadTransactionGraphQLField" = StripeReloadTransactionGraphQLField(
        "medium"
    )
    type: "StripeReloadTransactionGraphQLField" = StripeReloadTransactionGraphQLField(
        "type"
    )

    def fields(
        self, *subfields: StripeReloadTransactionGraphQLField
    ) -> "StripeReloadTransactionFields":
        """Subfields should come from the StripeReloadTransactionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StripeReloadTransactionFields":
        self._alias = alias
        return self


class TeamFields(GraphQLField):
    id: "TeamGraphQLField" = TeamGraphQLField("id")
    name: "TeamGraphQLField" = TeamGraphQLField("name")

    @classmethod
    def owner(cls) -> "UserFields":
        return UserFields("owner")

    @classmethod
    def memberships(cls) -> "TeamMembershipFields":
        return TeamMembershipFields("memberships")

    @classmethod
    def membership(cls) -> "TeamMembershipFields":
        return TeamMembershipFields("membership")

    @classmethod
    def members(cls) -> "TeamMembershipFields":
        return TeamMembershipFields("members")

    @classmethod
    def invites(cls) -> "TeamInviteFields":
        return TeamInviteFields("invites")

    is_owner: "TeamGraphQLField" = TeamGraphQLField("isOwner")
    available_roles: "TeamGraphQLField" = TeamGraphQLField("availableRoles")

    def fields(
        self,
        *subfields: Union[
            TeamGraphQLField, "TeamInviteFields", "TeamMembershipFields", "UserFields"
        ]
    ) -> "TeamFields":
        """Subfields should come from the TeamFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamFields":
        self._alias = alias
        return self


class TeamInviteFields(GraphQLField):
    id: "TeamInviteGraphQLField" = TeamInviteGraphQLField("id")

    @classmethod
    def team(cls) -> "TeamInviteTeamFields":
        return TeamInviteTeamFields("team")

    role: "TeamInviteGraphQLField" = TeamInviteGraphQLField("role")
    created_at: "TeamInviteGraphQLField" = TeamInviteGraphQLField("createdAt")
    expires_at: "TeamInviteGraphQLField" = TeamInviteGraphQLField("expiresAt")

    def fields(
        self, *subfields: Union[TeamInviteGraphQLField, "TeamInviteTeamFields"]
    ) -> "TeamInviteFields":
        """Subfields should come from the TeamInviteFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamInviteFields":
        self._alias = alias
        return self


class TeamInviteOwnerFields(GraphQLField):
    email: "TeamInviteOwnerGraphQLField" = TeamInviteOwnerGraphQLField("email")

    def fields(
        self, *subfields: TeamInviteOwnerGraphQLField
    ) -> "TeamInviteOwnerFields":
        """Subfields should come from the TeamInviteOwnerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamInviteOwnerFields":
        self._alias = alias
        return self


class TeamInviteTeamFields(GraphQLField):
    id: "TeamInviteTeamGraphQLField" = TeamInviteTeamGraphQLField("id")
    name: "TeamInviteTeamGraphQLField" = TeamInviteTeamGraphQLField("name")

    @classmethod
    def owner(cls) -> "TeamInviteOwnerFields":
        return TeamInviteOwnerFields("owner")

    def fields(
        self, *subfields: Union[TeamInviteTeamGraphQLField, "TeamInviteOwnerFields"]
    ) -> "TeamInviteTeamFields":
        """Subfields should come from the TeamInviteTeamFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamInviteTeamFields":
        self._alias = alias
        return self


class TeamMembershipFields(GraphQLField):
    id: "TeamMembershipGraphQLField" = TeamMembershipGraphQLField("id")

    @classmethod
    def member(cls) -> "UserFields":
        return UserFields("member")

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    scopes: "TeamMembershipGraphQLField" = TeamMembershipGraphQLField("scopes")
    created_at: "TeamMembershipGraphQLField" = TeamMembershipGraphQLField("createdAt")
    updated_at: "TeamMembershipGraphQLField" = TeamMembershipGraphQLField("updatedAt")

    def fields(
        self, *subfields: Union[TeamMembershipGraphQLField, "TeamFields", "UserFields"]
    ) -> "TeamMembershipFields":
        """Subfields should come from the TeamMembershipFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamMembershipFields":
        self._alias = alias
        return self


class TeamScopesFields(GraphQLField):
    role: "TeamScopesGraphQLField" = TeamScopesGraphQLField("role")

    def fields(self, *subfields: TeamScopesGraphQLField) -> "TeamScopesFields":
        """Subfields should come from the TeamScopesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamScopesFields":
        self._alias = alias
        return self


class UserFields(GraphQLField):
    @classmethod
    def pods(cls) -> "PodFields":
        return PodFields("pods")

    @classmethod
    def machines(cls, *, input: Optional[UserMachinesFilter] = None) -> "MachineFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UserMachinesFilter", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MachineFields("machines", arguments=cleared_arguments)

    @classmethod
    def machines_summary(cls) -> "MachineSummaryFields":
        return MachineSummaryFields("machines_summary")

    id: "UserGraphQLField" = UserGraphQLField("id")
    auth_id: "UserGraphQLField" = UserGraphQLField("authId")
    email: "UserGraphQLField" = UserGraphQLField("email")

    @classmethod
    def container_registry_creds(cls) -> "ContainerRegistryAuthFields":
        return ContainerRegistryAuthFields("container_registry_creds")

    current_spend_per_hr: "UserGraphQLField" = UserGraphQLField("currentSpendPerHr")
    machine_quota: "UserGraphQLField" = UserGraphQLField("machineQuota")
    referral_earned: "UserGraphQLField" = UserGraphQLField("referralEarned")
    signed_terms_of_service: "UserGraphQLField" = UserGraphQLField(
        "signedTermsOfService"
    )
    spend_limit: "UserGraphQLField" = UserGraphQLField("spendLimit")
    stripe_saved_payment_id: "UserGraphQLField" = UserGraphQLField(
        "stripeSavedPaymentId"
    )
    stripe_saved_payment_last_4: "UserGraphQLField" = UserGraphQLField(
        "stripeSavedPaymentLast4"
    )
    template_earned: "UserGraphQLField" = UserGraphQLField("templateEarned")
    multi_factor_enabled: "UserGraphQLField" = UserGraphQLField("multiFactorEnabled")

    @classmethod
    def machine_earnings(cls) -> "MachineEarningFields":
        return MachineEarningFields("machine_earnings")

    @classmethod
    def machine_earnings_custom_range(
        cls, *, input: Optional[EarningsCustomRangeInput] = None
    ) -> "MachineEarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "EarningsCustomRangeInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MachineEarningFields(
            "machine_earnings_custom_range", arguments=cleared_arguments
        )

    @classmethod
    def network_storage_earnings(
        cls, *, input: Optional[NetworkStorageEarningInput] = None
    ) -> "NetworkStorageEarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "NetworkStorageEarningInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NetworkStorageEarningFields(
            "network_storage_earnings", arguments=cleared_arguments
        )

    under_balance: "UserGraphQLField" = UserGraphQLField("underBalance")
    min_balance: "UserGraphQLField" = UserGraphQLField("minBalance")
    stripe_auto_reload_amount: "UserGraphQLField" = UserGraphQLField(
        "stripeAutoReloadAmount"
    )
    stripe_auto_payment_threshold: "UserGraphQLField" = UserGraphQLField(
        "stripeAutoPaymentThreshold"
    )

    @classmethod
    def spend_details(cls) -> "SpendDetailsFields":
        return SpendDetailsFields("spend_details")

    max_serverless_concurrency: "UserGraphQLField" = UserGraphQLField(
        "maxServerlessConcurrency"
    )
    client_lifetime_spend: "UserGraphQLField" = UserGraphQLField("clientLifetimeSpend")
    referral_id: "UserGraphQLField" = UserGraphQLField("referralId")

    @classmethod
    def datacenters(cls) -> "DataCenterFields":
        return DataCenterFields("datacenters")

    client_balance: "UserGraphQLField" = UserGraphQLField("clientBalance")
    host_balance: "UserGraphQLField" = UserGraphQLField("hostBalance")
    host_stripe_linked: "UserGraphQLField" = UserGraphQLField("hostStripeLinked")
    stripe_account_id: "UserGraphQLField" = UserGraphQLField("stripeAccountId")

    @classmethod
    def stripe_reload_history(cls) -> "StripeReloadTransactionFields":
        return StripeReloadTransactionFields("stripe_reload_history")

    @classmethod
    def daily_charges(cls) -> "ClientCreditChargeFields":
        return ClientCreditChargeFields("daily_charges")

    @classmethod
    def referral(cls) -> "UserReferralFields":
        return UserReferralFields("referral")

    pub_key: "UserGraphQLField" = UserGraphQLField("pubKey")

    @classmethod
    def information(cls) -> "UserInformationFields":
        return UserInformationFields("information")

    notify_pods_stale: "UserGraphQLField" = UserGraphQLField("notifyPodsStale")
    notify_pods_general: "UserGraphQLField" = UserGraphQLField("notifyPodsGeneral")
    notify_low_balance: "UserGraphQLField" = UserGraphQLField("notifyLowBalance")
    credit_alert_threshold: "UserGraphQLField" = UserGraphQLField(
        "creditAlertThreshold"
    )
    notify_other: "UserGraphQLField" = UserGraphQLField("notifyOther")

    @classmethod
    def pod_templates(cls) -> "PodTemplateFields":
        return PodTemplateFields("pod_templates")

    @classmethod
    def credit_codes(cls) -> "CreditCodeFields":
        return CreditCodeFields("credit_codes")

    @classmethod
    def endpoint(cls, id: str) -> "EndpointFields":
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "String!", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EndpointFields("endpoint", arguments=cleared_arguments)

    @classmethod
    def endpoints(cls) -> "EndpointFields":
        return EndpointFields("endpoints")

    @classmethod
    def network_volumes(cls) -> "NetworkVolumeFields":
        return NetworkVolumeFields("network_volumes")

    @classmethod
    def teams(cls) -> "TeamFields":
        return TeamFields("teams")

    @classmethod
    def owned_teams(cls) -> "TeamFields":
        return TeamFields("owned_teams")

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    @classmethod
    def team_membership(cls) -> "TeamMembershipFields":
        return TeamMembershipFields("team_membership")

    @classmethod
    def team_scopes(cls) -> "TeamScopesFields":
        return TeamScopesFields("team_scopes")

    is_team: "UserGraphQLField" = UserGraphQLField("isTeam")

    @classmethod
    def savings_plans(cls) -> "SavingsPlanFields":
        return SavingsPlanFields("savings_plans")

    @classmethod
    def serverless_discount(cls) -> "DiscountFields":
        return DiscountFields("serverless_discount")

    @classmethod
    def billing(cls, input: UserBillingInput) -> "UserBillingFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UserBillingInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserBillingFields("billing", arguments=cleared_arguments)

    csr_role: "UserGraphQLField" = UserGraphQLField("csrRole")

    @classmethod
    def secrets(cls) -> "SecretFields":
        return SecretFields("secrets")

    @classmethod
    def impersonations(cls) -> "ImpersonationFields":
        return ImpersonationFields("impersonations")

    @classmethod
    def active_impersonation(cls) -> "ImpersonationFields":
        return ImpersonationFields("active_impersonation")

    @classmethod
    def api_keys(cls) -> "ApiKeyFields":
        return ApiKeyFields("api_keys")

    def fields(
        self,
        *subfields: Union[
            UserGraphQLField,
            "ApiKeyFields",
            "ClientCreditChargeFields",
            "ContainerRegistryAuthFields",
            "CreditCodeFields",
            "DataCenterFields",
            "DiscountFields",
            "EndpointFields",
            "ImpersonationFields",
            "MachineEarningFields",
            "MachineFields",
            "MachineSummaryFields",
            "NetworkStorageEarningFields",
            "NetworkVolumeFields",
            "PodFields",
            "PodTemplateFields",
            "SavingsPlanFields",
            "SecretFields",
            "SpendDetailsFields",
            "StripeReloadTransactionFields",
            "TeamFields",
            "TeamMembershipFields",
            "TeamScopesFields",
            "UserBillingFields",
            "UserInformationFields",
            "UserReferralFields",
        ]
    ) -> "UserFields":
        """Subfields should come from the UserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserFields":
        self._alias = alias
        return self


class UserBillingFields(GraphQLField):
    @classmethod
    def gpu_cloud(cls) -> "UserGpuCloudBillingFields":
        return UserGpuCloudBillingFields("gpu_cloud")

    @classmethod
    def cpu_cloud(cls) -> "UserCpuCloudBillingFields":
        return UserCpuCloudBillingFields("cpu_cloud")

    @classmethod
    def serverless(
        cls, *, input: Optional[UserServerlessBillingInput] = None
    ) -> "UserServerlessBillingFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UserServerlessBillingInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserServerlessBillingFields("serverless", arguments=cleared_arguments)

    @classmethod
    def runpod_endpoint(cls) -> "UserRunpodEndpointBillingFields":
        return UserRunpodEndpointBillingFields("runpod_endpoint")

    @classmethod
    def storage(cls) -> "UserStorageBillingFields":
        return UserStorageBillingFields("storage")

    @classmethod
    def summary(cls) -> "UserSummaryBillingFields":
        return UserSummaryBillingFields("summary")

    def fields(
        self,
        *subfields: Union[
            UserBillingGraphQLField,
            "UserCpuCloudBillingFields",
            "UserGpuCloudBillingFields",
            "UserRunpodEndpointBillingFields",
            "UserServerlessBillingFields",
            "UserStorageBillingFields",
            "UserSummaryBillingFields",
        ]
    ) -> "UserBillingFields":
        """Subfields should come from the UserBillingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserBillingFields":
        self._alias = alias
        return self


class UserCpuCloudBillingFields(GraphQLField):
    cpu_flavor_id: "UserCpuCloudBillingGraphQLField" = UserCpuCloudBillingGraphQLField(
        "cpuFlavorId"
    )
    time: "UserCpuCloudBillingGraphQLField" = UserCpuCloudBillingGraphQLField("time")
    time_billed_seconds: "UserCpuCloudBillingGraphQLField" = (
        UserCpuCloudBillingGraphQLField("timeBilledSeconds")
    )
    amount: "UserCpuCloudBillingGraphQLField" = UserCpuCloudBillingGraphQLField(
        "amount"
    )

    def fields(
        self, *subfields: UserCpuCloudBillingGraphQLField
    ) -> "UserCpuCloudBillingFields":
        """Subfields should come from the UserCpuCloudBillingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserCpuCloudBillingFields":
        self._alias = alias
        return self


class UserGpuCloudBillingFields(GraphQLField):
    gpu_type_id: "UserGpuCloudBillingGraphQLField" = UserGpuCloudBillingGraphQLField(
        "gpuTypeId"
    )
    time: "UserGpuCloudBillingGraphQLField" = UserGpuCloudBillingGraphQLField("time")
    time_billed_seconds: "UserGpuCloudBillingGraphQLField" = (
        UserGpuCloudBillingGraphQLField("timeBilledSeconds")
    )
    amount: "UserGpuCloudBillingGraphQLField" = UserGpuCloudBillingGraphQLField(
        "amount"
    )

    def fields(
        self, *subfields: UserGpuCloudBillingGraphQLField
    ) -> "UserGpuCloudBillingFields":
        """Subfields should come from the UserGpuCloudBillingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserGpuCloudBillingFields":
        self._alias = alias
        return self


class UserInformationFields(GraphQLField):
    first_name: "UserInformationGraphQLField" = UserInformationGraphQLField("firstName")
    last_name: "UserInformationGraphQLField" = UserInformationGraphQLField("lastName")
    address_line_1: "UserInformationGraphQLField" = UserInformationGraphQLField(
        "addressLine1"
    )
    address_line_2: "UserInformationGraphQLField" = UserInformationGraphQLField(
        "addressLine2"
    )
    country_code: "UserInformationGraphQLField" = UserInformationGraphQLField(
        "countryCode"
    )
    company_name: "UserInformationGraphQLField" = UserInformationGraphQLField(
        "companyName"
    )
    company_identification: "UserInformationGraphQLField" = UserInformationGraphQLField(
        "companyIdentification"
    )
    tax_identification: "UserInformationGraphQLField" = UserInformationGraphQLField(
        "taxIdentification"
    )

    def fields(
        self, *subfields: UserInformationGraphQLField
    ) -> "UserInformationFields":
        """Subfields should come from the UserInformationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserInformationFields":
        self._alias = alias
        return self


class UserReferralFields(GraphQLField):
    code: "UserReferralGraphQLField" = UserReferralGraphQLField("code")

    @classmethod
    def current_month(cls) -> "UserReferralMonthFields":
        return UserReferralMonthFields("current_month")

    def fields(
        self, *subfields: Union[UserReferralGraphQLField, "UserReferralMonthFields"]
    ) -> "UserReferralFields":
        """Subfields should come from the UserReferralFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserReferralFields":
        self._alias = alias
        return self


class UserReferralMonthFields(GraphQLField):
    total_referrals: "UserReferralMonthGraphQLField" = UserReferralMonthGraphQLField(
        "totalReferrals"
    )
    total_spend: "UserReferralMonthGraphQLField" = UserReferralMonthGraphQLField(
        "totalSpend"
    )

    def fields(
        self, *subfields: UserReferralMonthGraphQLField
    ) -> "UserReferralMonthFields":
        """Subfields should come from the UserReferralMonthFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserReferralMonthFields":
        self._alias = alias
        return self


class UserRunpodEndpointBillingFields(GraphQLField):
    time: "UserRunpodEndpointBillingGraphQLField" = (
        UserRunpodEndpointBillingGraphQLField("time")
    )
    amount: "UserRunpodEndpointBillingGraphQLField" = (
        UserRunpodEndpointBillingGraphQLField("amount")
    )

    def fields(
        self, *subfields: UserRunpodEndpointBillingGraphQLField
    ) -> "UserRunpodEndpointBillingFields":
        """Subfields should come from the UserRunpodEndpointBillingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserRunpodEndpointBillingFields":
        self._alias = alias
        return self


class UserServerlessBillingFields(GraphQLField):
    time: "UserServerlessBillingGraphQLField" = UserServerlessBillingGraphQLField(
        "time"
    )
    amount: "UserServerlessBillingGraphQLField" = UserServerlessBillingGraphQLField(
        "amount"
    )
    time_billed_seconds: "UserServerlessBillingGraphQLField" = (
        UserServerlessBillingGraphQLField("timeBilledSeconds")
    )
    endpoint_id: "UserServerlessBillingGraphQLField" = (
        UserServerlessBillingGraphQLField("endpointId")
    )
    gpu_type_id: "UserServerlessBillingGraphQLField" = (
        UserServerlessBillingGraphQLField("gpuTypeId")
    )
    instance_id: "UserServerlessBillingGraphQLField" = (
        UserServerlessBillingGraphQLField("instanceId")
    )

    def fields(
        self, *subfields: UserServerlessBillingGraphQLField
    ) -> "UserServerlessBillingFields":
        """Subfields should come from the UserServerlessBillingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserServerlessBillingFields":
        self._alias = alias
        return self


class UserStorageBillingFields(GraphQLField):
    time: "UserStorageBillingGraphQLField" = UserStorageBillingGraphQLField("time")
    amount: "UserStorageBillingGraphQLField" = UserStorageBillingGraphQLField("amount")
    disk_space_billed_gb: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("diskSpaceBilledGB")
    )
    network_storage_disk_space_billed_gb: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("networkStorageDiskSpaceBilledGB")
    )
    network_storage_amount: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("networkStorageAmount")
    )
    gpu_disk_space_billed_gb: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("gpuDiskSpaceBilledGB")
    )
    gpu_storage_amount: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("gpuStorageAmount")
    )
    cpu_disk_space_billed_gb: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("cpuDiskSpaceBilledGB")
    )
    cpu_storage_amount: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("cpuStorageAmount")
    )
    sls_disk_space_billed_gb: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("slsDiskSpaceBilledGB")
    )
    sls_storage_amount: "UserStorageBillingGraphQLField" = (
        UserStorageBillingGraphQLField("slsStorageAmount")
    )

    def fields(
        self, *subfields: UserStorageBillingGraphQLField
    ) -> "UserStorageBillingFields":
        """Subfields should come from the UserStorageBillingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserStorageBillingFields":
        self._alias = alias
        return self


class UserSummaryBillingFields(GraphQLField):
    time: "UserSummaryBillingGraphQLField" = UserSummaryBillingGraphQLField("time")
    gpu_cloud_amount: "UserSummaryBillingGraphQLField" = UserSummaryBillingGraphQLField(
        "gpuCloudAmount"
    )
    cpu_cloud_amount: "UserSummaryBillingGraphQLField" = UserSummaryBillingGraphQLField(
        "cpuCloudAmount"
    )
    serverless_amount: "UserSummaryBillingGraphQLField" = (
        UserSummaryBillingGraphQLField("serverlessAmount")
    )
    storage_amount: "UserSummaryBillingGraphQLField" = UserSummaryBillingGraphQLField(
        "storageAmount"
    )
    runpod_endpoint_amount: "UserSummaryBillingGraphQLField" = (
        UserSummaryBillingGraphQLField("runpodEndpointAmount")
    )

    def fields(
        self, *subfields: UserSummaryBillingGraphQLField
    ) -> "UserSummaryBillingFields":
        """Subfields should come from the UserSummaryBillingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserSummaryBillingFields":
        self._alias = alias
        return self


class WebhookRequestStatusFields(GraphQLField):
    time: "WebhookRequestStatusGraphQLField" = WebhookRequestStatusGraphQLField("time")
    responses: "WebhookRequestStatusGraphQLField" = WebhookRequestStatusGraphQLField(
        "responses"
    )

    def fields(
        self, *subfields: WebhookRequestStatusGraphQLField
    ) -> "WebhookRequestStatusFields":
        """Subfields should come from the WebhookRequestStatusFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebhookRequestStatusFields":
        self._alias = alias
        return self


class WorkerStateFields(GraphQLField):
    time: "WorkerStateGraphQLField" = WorkerStateGraphQLField("time")
    initialized: "WorkerStateGraphQLField" = WorkerStateGraphQLField("initialized")
    ready: "WorkerStateGraphQLField" = WorkerStateGraphQLField("ready")
    running: "WorkerStateGraphQLField" = WorkerStateGraphQLField("running")
    throttled: "WorkerStateGraphQLField" = WorkerStateGraphQLField("throttled")

    def fields(self, *subfields: WorkerStateGraphQLField) -> "WorkerStateFields":
        """Subfields should come from the WorkerStateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkerStateFields":
        self._alias = alias
        return self
